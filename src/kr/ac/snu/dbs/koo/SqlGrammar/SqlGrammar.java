/* Generated By:JavaCC: Do not edit this line. SqlGrammar.java */
package kr.ac.snu.dbs.koo.SqlGrammar;

import java.util.ArrayList;

public class SqlGrammar implements SqlGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    SqlGrammar parser = new SqlGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      try
      {
        switch (SqlGrammar.one_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        e.printStackTrace(System.out);
//        System.out.println(e.getMessage());
        SqlGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
//        System.out.println(e.getMessage());
        e.printStackTrace(System.out);
        break;
      }
    }
  }

  static final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      sql_clause();
      jj_consume_token(18);
    {if (true) return 0;}
      break;
    case 18:
      jj_consume_token(18);
    {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void sql_clause() throws ParseException {
  ArrayList<Attributer> projection = null;
  ArrayList<String> tables = null;
  ArrayList<Formula> where_list = null;
    jj_consume_token(SELECT);
    projection = select_clause();
    jj_consume_token(FROM);
    tables = from_clause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      where_list = where_clause();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  // For Debug
  if (false) {
    System.out.println("\u005cn\u005cn[INFO] select caluse");
    for (int i = 0; i < projection.size(); i++) {
      System.out.println("[INFO] " + projection.get(i));
    }
    System.out.println("\u005cn[INFO] from clause");
    for (int i = 0; i < tables.size(); i++) {
      System.out.println("[INFO] " + tables.get(i));
    }
    if (where_list != null) {
      System.out.println("\u005cn[INFO] where clause");
      for (int i = 0; i < where_list.size(); i++) {
        System.out.println("[INFO] " + where_list.get(i));
      }
    }
  }

  // temporal exception for NoTableFounded
  for (int i = 0; i < projection.size(); i++) {
    Attributer item = projection.get(i);
    if (item.table == null) {
      continue;
    }

    boolean isMatching = false;
    for (int j = 0; j < tables.size(); j++) {
      if (item.table.equals(tables.get(j))) {
        isMatching = true;
        break;
      }
    }

    if (isMatching == false) {
      {if (true) throw new ParseException();}
    }
  }

  // where
  if (where_list != null) {
    for (int i = 0; i < where_list.size(); i++) {
      Formula item = where_list.get(i);
      boolean isMatching = false;
      if (item.lvalue.table == null) {
        // e.g. 20 < s.age is not valid 
        {if (true) throw new ParseException();}
      } else {
        // lvalue
        for (int j = 0; j < tables.size(); j++) {
          if (item.lvalue.table.equals(tables.get(j))) {
            isMatching = true;
            break;
          }
        }
        if (isMatching == false) {
          {if (true) throw new ParseException();}
        }
      }

      isMatching = false;
      if (item.rvalue.table != null) {
        // rvalue
        for (int j = 0; j < tables.size(); j++) {
          if (item.rvalue.table.equals(tables.get(j))) {
            isMatching = true;
            break;
          }
        }
        if (isMatching == false) {
          {if (true) throw new ParseException();}
        }
      }
    }
  }
  }

  static final public ArrayList<Attributer> select_clause() throws ParseException {
  Token token1 = null, token2 = null;
  ArrayList<Attributer> tables = new ArrayList();
  Attributer temp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      token1 = jj_consume_token(ASTERISK);
        Attributer asterisk = new Attributer();
        asterisk.attribute = "*";
        tables.add(asterisk);
      break;
    case STRING:
    case WORD:
    case INT_VALUE:
      temp = attribute();
        tables.add(temp);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(19);
        temp = attribute();
            tables.add(temp);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return tables;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> from_clause() throws ParseException {
  Token table1 = null, table2 = null;
  ArrayList<String> tables = new ArrayList();
    table1 = jj_consume_token(WORD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      table2 = jj_consume_token(WORD);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    tables.add(table1.toString());
    if (table2 != null) {
      tables.add(table2.toString());
    }
        {if (true) return tables;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Formula> where_clause() throws ParseException {
  Formula result = null;
  ArrayList<Formula> formulas = new ArrayList();
    result = formula();
        formulas.add(result);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      result = formula();
      formulas.add(result);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return formulas;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributer attribute() throws ParseException {
  Attributer value = new Attributer();
  Token temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      temp = jj_consume_token(WORD);
      value.table = temp.toString();
      jj_consume_token(20);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      temp = jj_consume_token(WORD);
      break;
    case INT_VALUE:
      temp = jj_consume_token(INT_VALUE);
      break;
    case STRING:
      temp = jj_consume_token(STRING);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    // TODO: checking diff types
    value.attribute = temp.toString();
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  static final public Formula formula() throws ParseException {
  Attributer lvalue = null;
  Token operend = null;
  Attributer rvalue = null;
    lvalue = attribute();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      operend = jj_consume_token(EQUAL);
      break;
    case GT:
      operend = jj_consume_token(GT);
      break;
    case LT:
      operend = jj_consume_token(LT);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rvalue = attribute();
    Formula result = new Formula();
    result.lvalue = lvalue;
    result.operend = operend.toString();
    result.rvalue = rvalue;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SqlGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40020,0x80,0x80000,0x16200,0x80000,0x100,0x4000,0x16000,0x1c00,};
   }

  /** Constructor with InputStream. */
  public SqlGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SqlGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SqlGrammar(SqlGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SqlGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class Attributer {
  public String table = null;
  public String attribute = null;

  public String toString() {
    return table + "." + attribute;
  }
}

class Formula {
  public Attributer lvalue = null;
  public String operend = null;
  public Attributer rvalue = null;

  public String toString() {
    return lvalue.toString() + " " + operend + " " + rvalue.toString();
  }
}

class NoTableFoundException extends Exception {
  // TODO:
}
